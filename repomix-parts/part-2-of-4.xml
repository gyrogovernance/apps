This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: dist/, node_modules/, docs/, *.md, LICENSE, assets/, insights/, schema/, public/, package-lock.json, *.png, *.jpg, *.jpeg, *.gif, *.svg, *.ico, *.webp, .DS_Store, Thumbs.db, .vscode/, .idea/, *.swp, *.swo, *.log, npm-debug.log*, *.tmp, .cache/, *.tsbuildinfo, *.map, *.min.js, *.min.css, .git/, webpack.config.js, postcss.config.js, tsconfig.json, tailwind.config.js, src/styles/**, repomix-output.xml, repomix-exlusions.md, repomix-parts/, split-repomix.js, index.html, webpack.dev.config.js
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.cursorrules
.gitignore
package.json
src/background.ts
src/components/AnalystSection.tsx
src/components/apps/ChallengesApp/ChallengesApp.tsx
src/components/apps/ChallengesApp/CustomBuilder.tsx
src/components/apps/ChallengesApp/GyroSuiteView.tsx
src/components/apps/ChallengesApp/PromptWorkshop.tsx
src/components/apps/ChallengesApp/SDGGallery.tsx
src/components/apps/ChallengesApp/TypeSelector.tsx
src/components/apps/InsightsApp/InsightDetail.tsx
src/components/apps/InsightsApp/InsightsApp.tsx
src/components/apps/InsightsApp/InsightsLibrary.tsx
src/components/apps/JournalApp/AnalysisView.tsx
src/components/apps/JournalApp/JournalApp.tsx
src/components/apps/JournalApp/JournalHome.tsx
src/components/apps/JournalApp/SessionView.tsx
src/components/apps/SettingsApp.tsx
src/components/apps/WelcomeApp.tsx
src/components/ElementPicker.tsx
src/components/Notebook.tsx
src/components/ProgressDashboard.tsx
src/components/ReportSection.tsx
src/components/SetupSection.tsx
src/components/shared/AppCard.tsx
src/components/shared/ClipboardMonitor.tsx
src/components/shared/JourneyMap.tsx
src/components/shared/MetricCard.tsx
src/components/shared/Modal.tsx
src/components/shared/PersistentHeader.tsx
src/components/shared/SmartTooltip.tsx
src/components/shared/Toast.tsx
src/components/SynthesisSection.tsx
src/hooks/useKeyboardShortcuts.ts
src/hooks/useSettings.ts
src/lib/calculations.ts
src/lib/challenges.ts
src/lib/chrome-mock.ts
src/lib/clipboard-assistant.ts
src/lib/export.ts
src/lib/metric-definitions.ts
src/lib/parsing.ts
src/lib/prompts.ts
src/lib/report-generator.ts
src/lib/session-helpers.ts
src/lib/session-utils.ts
src/lib/storage.ts
src/lib/text-utils.ts
src/lib/ui-utils.ts
src/lib/validation.ts
src/sidepanel.tsx
src/types/index.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.
<file path="src/components/apps/InsightsApp/InsightDetail.tsx">
import React from 'react';
import { GovernanceInsight, AlignmentCategory } from '../../../types';
import { exportAsMarkdown, exportAsJSON } from '../../../lib/export';
import { getScoreColor, getAlignmentBadgeColor } from '../../../lib/ui-utils';
import { countWords, estimateTokens, formatTokenCount } from '../../../lib/text-utils';
import { CORE_METRICS, STRUCTURE_METRICS, BEHAVIOR_METRICS, METRIC_CATEGORIES } from '../../../lib/metric-definitions';
import { MetricCard, MetricSectionHeader } from '../../shared/MetricCard';
import { useToast } from '../../shared/Toast';

interface InsightDetailProps {
  insight: GovernanceInsight;
  onBack: () => void;
}

const InsightDetail: React.FC<InsightDetailProps> = ({ insight, onBack }) => {
  const [activeTab, setActiveTab] = React.useState<'overview' | 'structure' | 'behavior' | 'specialization' | 'transcript'>('overview');
  const toast = useToast();

  const handleExportMarkdown = () => {
    const markdown = exportAsMarkdown(insight);
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `insight_${insight.challenge.title.replace(/\s+/g, '_')}.md`;
    a.click();
    URL.revokeObjectURL(url);
    toast.show('Markdown exported successfully', 'success');
  };

  const handleExportJSON = () => {
    const json = exportAsJSON(insight);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `insight_${insight.challenge.title.replace(/\s+/g, '_')}.json`;
    a.click();
    URL.revokeObjectURL(url);
    toast.show('JSON exported successfully', 'success');
  };

  const handleCopyJSON = async () => {
    const json = exportAsJSON(insight);
    await navigator.clipboard.writeText(json);
    toast.show('JSON copied to clipboard', 'success');
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      <button
        onClick={onBack}
        className="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 mb-6 text-sm flex items-center gap-1"
      >
        ← Back to Library
      </button>

      {/* Header */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-3">
          {insight.challenge.title}
        </h1>
        <div className="flex flex-wrap gap-2 mb-3">
          <span className="px-3 py-1 bg-blue-100 dark:bg-blue-900/40 text-blue-800 dark:text-blue-200 text-sm rounded-full">
            {insight.challenge.type}
          </span>
          {insight.challenge.domain.map(d => (
            <span key={d} className="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-full">
              {d}
            </span>
          ))}
          <span className="px-3 py-1 text-gray-600 dark:text-gray-400 text-sm">
            {new Date(insight.process.created_at).toLocaleString()}
          </span>
        </div>
      </div>

      {/* Quality Metrics Cards */}
      <div className="grid md:grid-cols-3 gap-4 mb-6">
        {/* Quality Index */}
        <div className="p-5 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
          <div className="flex items-start justify-between mb-2">
            <div className="flex-1">
              <div className="text-sm font-semibold text-gray-900 dark:text-gray-100 mb-0.5">Quality Index</div>
              <div className="text-xs text-gray-600 dark:text-gray-400">{CORE_METRICS.qi.shortDesc}</div>
            </div>
            <div className={`text-3xl font-bold ml-3 ${getScoreColor(insight.quality.quality_index / 10)}`}>
              {insight.quality.quality_index.toFixed(1)}%
            </div>
          </div>
          <details className="mt-2">
            <summary className="cursor-pointer text-xs text-blue-700 dark:text-blue-300 hover:underline">
              Learn more
            </summary>
            <div className="mt-2 p-3 bg-white/50 dark:bg-gray-900/30 rounded text-xs text-gray-700 dark:text-gray-300 whitespace-pre-line">
              {CORE_METRICS.qi.fullDesc}
              <div className="mt-2 pt-2 border-t border-blue-300 dark:border-blue-700 font-mono text-xs">
                <strong>Formula:</strong> {CORE_METRICS.qi.formula}
              </div>
            </div>
          </details>
        </div>

        {/* Superintelligence Index */}
        <div className="p-5 bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-lg border border-green-200 dark:border-green-800">
          <div className="flex items-start justify-between mb-2">
            <div className="flex-1">
              <div className="text-sm font-semibold text-gray-900 dark:text-gray-100 mb-0.5">Superintelligence Index</div>
              <div className="text-xs text-gray-600 dark:text-gray-400">{CORE_METRICS.si.shortDesc}</div>
            </div>
            <div className="text-3xl font-bold text-gray-900 dark:text-gray-100 ml-3">
              {isNaN(insight.quality.superintelligence_index) ? 'N/A' : insight.quality.superintelligence_index.toFixed(2)}
            </div>
          </div>
          <details className="mt-2">
            <summary className="cursor-pointer text-xs text-green-700 dark:text-green-300 hover:underline">
              Show calculations
            </summary>
            <div className="mt-2 p-3 bg-white/50 dark:bg-gray-900/30 rounded text-xs space-y-2">
              <div className="text-gray-700 dark:text-gray-300">
                <p className="font-medium mb-1">Current Values:</p>
                <p>• Target Aperture A*: 0.020701 (K=4)</p>
                <p>• Deviation: {isNaN(insight.quality.si_deviation) ? 'N/A' : `${insight.quality.si_deviation.toFixed(2)}×`} from target</p>
                {isNaN(insight.quality.superintelligence_index) && (
                  <p className="text-yellow-600 dark:text-yellow-400 mt-2">⚠ Calculation unavailable - check console for errors</p>
                )}
              </div>
              <div className="pt-2 border-t border-green-300 dark:border-green-700 text-gray-600 dark:text-gray-400 whitespace-pre-line">
                {CORE_METRICS.si.fullDesc}
              </div>
            </div>
          </details>
        </div>

        <div className="p-5 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg border border-purple-200 dark:border-purple-800">
          <div className="flex items-start justify-between mb-2">
            <div className="flex-1">
              <div className="text-sm font-semibold text-gray-900 dark:text-gray-100 mb-0.5">Alignment Rate</div>
              <div className="text-xs text-gray-600 dark:text-gray-400">{CORE_METRICS.ar.shortDesc}</div>
            </div>
            <div className="ml-3">
              <span className={`inline-block px-2.5 py-1 rounded-full text-xs font-bold ${getAlignmentBadgeColor(insight.quality.alignment_rate_category)}`}>
                {insight.quality.alignment_rate_category}
              </span>
            </div>
          </div>
          <div className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2">
            {insight.quality.alignment_rate.toFixed(4)}/min
          </div>
          <details className="mt-2">
            <summary className="cursor-pointer text-xs text-purple-700 dark:text-purple-300 hover:underline">
              Learn more
            </summary>
            <div className="mt-2 p-3 bg-white/50 dark:bg-gray-900/30 rounded text-xs text-gray-700 dark:text-gray-300 whitespace-pre-line">
              {CORE_METRICS.ar.fullDesc}
              <div className="mt-2 pt-2 border-t border-purple-300 dark:border-purple-700 font-mono text-xs">
                <strong>Formula:</strong> {CORE_METRICS.ar.formula}
              </div>
            </div>
          </details>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200 dark:border-gray-700 mb-6">
        <div className="flex gap-4">
          {[
            { id: 'overview', label: 'Overview' },
            { id: 'structure', label: 'Structure' },
            { id: 'behavior', label: 'Behavior' },
            { id: 'specialization', label: 'Specialization' },
            { id: 'transcript', label: 'Transcript' }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as typeof activeTab)}
              className={`px-4 py-2 font-medium text-sm border-b-2 transition-colors ${
                activeTab === tab.id
                  ? 'border-blue-600 text-blue-600 dark:text-blue-400'
                  : 'border-transparent text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Tab Content */}
      <div className="mb-6">
        {activeTab === 'overview' && (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3">Summary</h3>
              <p className="text-gray-700 dark:text-gray-300 whitespace-pre-wrap">
                {insight.insights.summary}
              </p>
            </div>

            {insight.quality.pathologies.detected.length > 0 && (
              <div className="p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3 flex items-center gap-2">
                  <span>🔬</span>
                  <span>Detected Pathologies ({insight.quality.pathologies.detected.length})</span>
                </h3>
                <ul className="space-y-2">
                  {insight.quality.pathologies.detected.map((pathology, idx) => (
                    <li key={idx} className="text-sm text-gray-700 dark:text-gray-300 flex gap-2">
                      <span className="text-red-600 dark:text-red-400">•</span>
                      <span>{pathology}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3">Models Used</h3>
              <div className="grid md:grid-cols-2 gap-3">
                <div className="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                  <div className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Synthesis Epochs</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    Epoch 1: {insight.process.models_used.synthesis_epoch1}
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    Epoch 2: {insight.process.models_used.synthesis_epoch2}
                  </div>
                </div>
                <div className="p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                  <div className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Analyst Models</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    Analyst 1: {insight.process.models_used.analyst1}
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    Analyst 2: {insight.process.models_used.analyst2}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'structure' && (
          <div>
            <MetricSectionHeader 
              title="Structure Metrics"
              definition={METRIC_CATEGORIES.structure}
              emoji="🏗️"
            />
            <div className="grid md:grid-cols-2 gap-4">
              {Object.entries(insight.quality.structure_scores).map(([key, value]) => (
                <MetricCard
                  key={key}
                  label={key}
                  value={value}
                  valueColor={getScoreColor(value)}
                  definition={STRUCTURE_METRICS[key as keyof typeof STRUCTURE_METRICS]}
                />
              ))}
            </div>
          </div>
        )}

        {activeTab === 'behavior' && (
          <div>
            <MetricSectionHeader 
              title="Behavior Metrics"
              definition={METRIC_CATEGORIES.behavior}
              emoji="🧠"
            />
            <div className="grid md:grid-cols-2 gap-4 mb-4">
              {Object.entries(insight.quality.behavior_scores).map(([key, value]) => (
                <MetricCard
                  key={key}
                  label={key}
                  value={value}
                  valueColor={typeof value === 'number' ? getScoreColor(value) : 'text-gray-500 dark:text-gray-400'}
                  definition={BEHAVIOR_METRICS[key as keyof typeof BEHAVIOR_METRICS]}
                />
              ))}
            </div>
            <div className="p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg text-sm">
              <p className="text-gray-700 dark:text-gray-300">
                <strong>ℹ️ N/A Handling:</strong> Behavior metrics must be fully scored (6/6) to compute SI. 
                If any metric is N/A, SI is not computed. N/A metrics are excluded from QI normalization.
              </p>
            </div>
          </div>
        )}

        {activeTab === 'specialization' && (
          <div>
            <MetricSectionHeader 
              title="Specialization Metrics"
              definition={METRIC_CATEGORIES.specialization}
              emoji="🎯"
            />
            {Object.keys(insight.quality.specialization_scores).length > 0 ? (
              <div className="grid md:grid-cols-2 gap-4 mb-4">
                {Object.entries(insight.quality.specialization_scores).map(([key, value]) => (
                  <div key={key} className="p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex-1">
                        <div className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-0.5 capitalize">
                          {key}
                        </div>
                        <div className="text-xs text-gray-500 dark:text-gray-400">
                          Domain-specific metric for {insight.challenge.type} challenge
                        </div>
                      </div>
                      <div className={`text-2xl font-bold ml-3 ${getScoreColor(value)}`}>
                        {value.toFixed(1)}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg text-sm">
                <p className="text-gray-700 dark:text-gray-300">
                  ℹ️ <strong>No specialization scores recorded.</strong> When empty, specialization contributes 0 to Quality Index (per GyroDiagnostics spec).
                </p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'transcript' && (
          <div className="space-y-6">
            {insight.transcripts ? (
              <>
                {/* Raw Transcripts */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3 flex items-center gap-2">
                    <span>📝</span>
                    <span>Epoch 1 Synthesis</span>
                  </h3>
                  <div className="space-y-4">
                    {insight.transcripts.epoch1.map((turn, i) => {
                      const words = countWords(turn);
                      const tokens = estimateTokens(words);
                      return (
                        <div key={i} className="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                          <div className="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2 flex items-center justify-between">
                            <span>Turn {i + 1}</span>
                            <span className="text-gray-500 dark:text-gray-400 font-normal">
                              {words} words • ~{formatTokenCount(tokens)} tokens
                            </span>
                          </div>
                          <pre className="whitespace-pre-wrap text-sm text-gray-700 dark:text-gray-300">
                            {turn}
                          </pre>
                        </div>
                      );
                    })}
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3 flex items-center gap-2">
                    <span>📝</span>
                    <span>Epoch 2 Synthesis</span>
                  </h3>
                  <div className="space-y-4">
                    {insight.transcripts.epoch2.map((turn, i) => {
                      const words = countWords(turn);
                      const tokens = estimateTokens(words);
                      return (
                        <div key={i} className="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                          <div className="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2 flex items-center justify-between">
                            <span>Turn {i + 1}</span>
                            <span className="text-gray-500 dark:text-gray-400 font-normal">
                              {words} words • ~{formatTokenCount(tokens)} tokens
                            </span>
                          </div>
                          <pre className="whitespace-pre-wrap text-sm text-gray-700 dark:text-gray-300">
                            {turn}
                          </pre>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Analyst Insights */}
                <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3">
                    🔬 Analyst Evaluations
                  </h3>
                  <div className="p-6 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                    <pre className="whitespace-pre-wrap text-sm text-gray-700 dark:text-gray-300 font-mono">
                      {insight.insights.combined_markdown}
                    </pre>
                  </div>
                </div>
              </>
            ) : (
              /* Fallback for old insights without transcripts */
              <div className="p-6 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                  ℹ️ This insight was generated before transcript persistence was enabled.
                  Only analyst evaluations are available.
                </p>
                <pre className="whitespace-pre-wrap text-sm text-gray-700 dark:text-gray-300 font-mono">
                  {insight.insights.combined_markdown}
                </pre>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Export Actions */}
      <div className="flex flex-wrap gap-3 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
        <button
          onClick={handleExportMarkdown}
          className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors"
        >
          📄 Export Markdown
        </button>
        <button
          onClick={handleExportJSON}
          className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors"
        >
          📊 Export JSON
        </button>
        <button
          onClick={handleCopyJSON}
          className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors"
        >
          📋 Copy JSON
        </button>
      </div>
    </div>
  );
};

export default InsightDetail;
</file>

<file path="src/components/apps/InsightsApp/InsightsApp.tsx">
import React, { useState, useEffect } from 'react';
import { NotebookState, InsightsView, GovernanceInsight } from '../../../types';
import { insights as insightsStorage } from '../../../lib/storage';
import InsightsLibrary from './InsightsLibrary';
import InsightDetail from './InsightDetail';

interface InsightsAppProps {
  state: NotebookState;
  onUpdate: (updates: Partial<NotebookState> | ((prev: NotebookState) => Partial<NotebookState>)) => void;
}

const InsightsApp: React.FC<InsightsAppProps> = ({ state, onUpdate }) => {
  const [selectedInsightId, setSelectedInsightId] = useState<string | null>(null);
  const [selectedInsight, setSelectedInsight] = useState<GovernanceInsight | null>(null);

  const currentView = state.ui.insightsView || 'library';

  // Clear selection when returning to library view
  useEffect(() => {
    if (currentView === 'library') {
      setSelectedInsightId(null);
      setSelectedInsight(null);
    }
  }, [currentView]);

  useEffect(() => {
    if (selectedInsightId) {
      loadInsight(selectedInsightId);
    }
  }, [selectedInsightId]);

  const loadInsight = async (insightId: string) => {
    const insight = await insightsStorage.getById(insightId);
    setSelectedInsight(insight);
    navigateToView('detail');
  };

  const navigateToView = (view: InsightsView) => {
    onUpdate(prev => ({
      ui: { ...prev.ui, insightsView: view }
    }));
  };

  const handleSelectInsight = (insightId: string) => {
    setSelectedInsightId(insightId);
  };

  const handleBackToLibrary = () => {
    setSelectedInsightId(null);
    setSelectedInsight(null);
    navigateToView('library');
  };

  // Render current view
  switch (currentView) {
    case 'library':
      return <InsightsLibrary onSelectInsight={handleSelectInsight} />;

    case 'detail':
      if (!selectedInsight) {
        return (
          <div className="flex items-center justify-center h-64">
            <div className="text-gray-600 dark:text-gray-400">Loading insight...</div>
          </div>
        );
      }
      return <InsightDetail insight={selectedInsight} onBack={handleBackToLibrary} />;

    case 'comparison':
      return (
        <div className="max-w-6xl mx-auto p-6">
          <div className="p-8 bg-blue-50 dark:bg-blue-900/20 rounded-lg text-center">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
              🚧 Comparison View (Coming Soon)
            </h2>
            <p className="text-gray-600 dark:text-gray-400">
              Compare multiple insights side-by-side
            </p>
            <button
              onClick={handleBackToLibrary}
              className="mt-4 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg"
            >
              Back to Library
            </button>
          </div>
        </div>
      );

    default:
      return <InsightsLibrary onSelectInsight={handleSelectInsight} />;
  }
};

export default InsightsApp;
</file>

<file path="src/components/apps/InsightsApp/InsightsLibrary.tsx">
import React, { useState, useEffect } from 'react';
import { GovernanceInsight, ChallengeType, AlignmentCategory } from '../../../types';
import { insights as insightsStorage } from '../../../lib/storage';
import { getQIColor, getAlignmentColor } from '../../../lib/ui-utils';

interface InsightsLibraryProps {
  onSelectInsight: (insightId: string) => void;
}

interface Filters {
  search: string;
  challengeType: ChallengeType | 'all';
  alignmentCategory: AlignmentCategory | 'all';
  minQI: number;
}

const InsightsLibrary: React.FC<InsightsLibraryProps> = ({ onSelectInsight }) => {
  const [allInsights, setAllInsights] = useState<GovernanceInsight[]>([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState<Filters>({
    search: '',
    challengeType: 'all',
    alignmentCategory: 'all',
    minQI: 0
  });

  // Load insights on mount
  useEffect(() => {
    loadInsights();
  }, []);

  const loadInsights = async () => {
    setLoading(true);
    try {
      const loaded = await insightsStorage.getAll();
      setAllInsights(loaded);
    } catch (error) {
      console.error('Error loading insights:', error);
    } finally {
      setLoading(false);
    }
  };

  // Filter insights
  const filteredInsights = allInsights.filter(insight => {
    if (filters.search && !insight.challenge.title.toLowerCase().includes(filters.search.toLowerCase())) {
      return false;
    }
    if (filters.challengeType !== 'all' && insight.challenge.type !== filters.challengeType) {
      return false;
    }
    if (filters.alignmentCategory !== 'all' && insight.quality.alignment_rate_category !== filters.alignmentCategory) {
      return false;
    }
    if (insight.quality.quality_index < filters.minQI) {
      return false;
    }
    return true;
  });

  // Sort by date (most recent first)
  const sortedInsights = [...filteredInsights].sort((a, b) => 
    new Date(b.process.created_at).getTime() - new Date(a.process.created_at).getTime()
  );

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-gray-600 dark:text-gray-400">Loading insights...</div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2 flex items-center gap-2">
          <span>💡</span>
          <span>Insights Library</span>
        </h1>
        <p className="text-gray-600 dark:text-gray-400">
          Browse, organize, and share your completed evaluations
        </p>
      </div>

      {/* Filters */}
      <div className="mb-6 space-y-4">
        {/* Search */}
        <div>
          <input
            type="text"
            placeholder="🔍 Search insights..."
            value={filters.search}
            onChange={(e) => setFilters({ ...filters, search: e.target.value })}
            className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        {/* Filter buttons */}
        <div className="flex flex-wrap gap-3">
          <div>
            <label className="text-xs text-gray-600 dark:text-gray-400 mb-1 block">Challenge Type</label>
            <select
              value={filters.challengeType}
              onChange={(e) => setFilters({ ...filters, challengeType: e.target.value as ChallengeType | 'all' })}
              className="px-3 py-1.5 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
            >
              <option value="all">All Types</option>
              <option value="formal">Formal</option>
              <option value="normative">Normative</option>
              <option value="procedural">Procedural</option>
              <option value="strategic">Strategic</option>
              <option value="epistemic">Epistemic</option>
              <option value="custom">Custom</option>
            </select>
          </div>

          <div>
            <label className="text-xs text-gray-600 dark:text-gray-400 mb-1 block">Alignment</label>
            <select
              value={filters.alignmentCategory}
              onChange={(e) => setFilters({ ...filters, alignmentCategory: e.target.value as AlignmentCategory | 'all' })}
              className="px-3 py-1.5 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
            >
              <option value="all">All</option>
              <option value="VALID">Valid</option>
              <option value="SUPERFICIAL">Superficial</option>
              <option value="SLOW">Slow</option>
            </select>
          </div>

          <div>
            <label className="text-xs text-gray-600 dark:text-gray-400 mb-1 block">Min QI</label>
            <input
              type="number"
              min="0"
              max="100"
              value={filters.minQI}
              onChange={(e) => setFilters({ ...filters, minQI: Number(e.target.value) })}
              className="w-20 px-3 py-1.5 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
            />
          </div>

          {(filters.search || filters.challengeType !== 'all' || filters.alignmentCategory !== 'all' || filters.minQI > 0) && (
            <button
              onClick={() => setFilters({ search: '', challengeType: 'all', alignmentCategory: 'all', minQI: 0 })}
              className="px-3 py-1.5 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300"
            >
              Clear Filters
            </button>
          )}
        </div>
      </div>

      {/* Results Count */}
      <div className="mb-4 text-sm text-gray-600 dark:text-gray-400">
        Showing {sortedInsights.length} of {allInsights.length} insights
      </div>

      {/* Insights List */}
      {sortedInsights.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-5xl mb-4">📭</div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">
            {allInsights.length === 0 ? 'No insights yet' : 'No insights match your filters'}
          </h3>
          <p className="text-gray-600 dark:text-gray-400 mb-4">
            {allInsights.length === 0 
              ? 'Complete an evaluation to see insights here'
              : 'Try adjusting your filters'}
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          {sortedInsights.map((insight) => (
            <button
              key={insight.id}
              onClick={() => onSelectInsight(insight.id)}
              className="w-full p-5 bg-white dark:bg-gray-800 rounded-lg border-2 border-gray-200 dark:border-gray-700 hover:border-blue-500 hover:shadow-lg transition-all text-left"
            >
              <div className="flex items-start justify-between mb-3">
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-1">
                    {insight.challenge.title}
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    <span className="px-2 py-1 bg-blue-100 dark:bg-blue-900/40 text-blue-800 dark:text-blue-200 text-xs rounded-full">
                      {insight.challenge.type}
                    </span>
                    {insight.challenge.domain.slice(0, 3).map(d => (
                      <span key={d} className="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs rounded-full">
                        {d}
                      </span>
                    ))}
                    {insight.challenge.domain.length > 3 && (
                      <span className="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs rounded-full">
                        +{insight.challenge.domain.length - 3} more
                      </span>
                    )}
                  </div>
                </div>
                <div className="text-sm text-gray-500 dark:text-gray-400">
                  {new Date(insight.process.created_at).toLocaleDateString()}
                </div>
              </div>

              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-3">
                <div>
                  <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">Quality Index</div>
                  <div className={`text-xl font-bold ${getQIColor(insight.quality.quality_index)}`}>
                    {insight.quality.quality_index.toFixed(1)}%
                  </div>
                </div>
                <div>
                  <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">SI</div>
                  <div className="text-xl font-bold text-gray-900 dark:text-gray-100">
                    {isNaN(insight.quality.superintelligence_index) ? 'N/A' : insight.quality.superintelligence_index.toFixed(1)}
                  </div>
                </div>
                <div>
                  <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">Alignment</div>
                  <div>
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getAlignmentColor(insight.quality.alignment_rate_category)}`}>
                      {insight.quality.alignment_rate_category}
                    </span>
                  </div>
                </div>
                <div>
                  <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">Pathologies</div>
                  <div className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                    {insight.quality.pathologies.detected.length}
                  </div>
                </div>
              </div>

              <div className="text-sm text-gray-600 dark:text-gray-400">
                Models: {insight.process.models_used.synthesis_epoch1}, {insight.process.models_used.analyst1}
              </div>
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default InsightsLibrary;
</file>

<file path="src/components/apps/JournalApp/AnalysisView.tsx">
import React from 'react';
import { NotebookState } from '../../../types';
import AnalystSection from '../../AnalystSection';

interface AnalysisViewProps {
  state: NotebookState;
  onUpdate: (updates: Partial<NotebookState> | ((prev: NotebookState) => Partial<NotebookState>)) => void;
  analystKey: 'analyst1' | 'analyst2';
  onNext: () => void;
  onBack: () => void;
}

/**
 * AnalysisView wraps AnalystSection to provide consistent JournalApp routing.
 * Currently passes through to existing AnalystSection which already syncs with sessions.
 * Future: Could load directly from session storage here for true session-first architecture.
 */
const AnalysisView: React.FC<AnalysisViewProps> = ({
  state,
  onUpdate,
  analystKey,
  onNext,
  onBack
}) => {
  // For now, delegate to AnalystSection which already has session sync
  // In future iteration, could load session here and pass specific analyst data
  return (
    <AnalystSection
      state={state}
      onUpdate={onUpdate}
      analystKey={analystKey}
      onNext={onNext}
      onBack={onBack}
    />
  );
};

export default AnalysisView;
</file>

<file path="src/components/apps/JournalApp/JournalApp.tsx">
import React from 'react';
import { NotebookState, JournalView } from '../../../types';
import { storage } from '../../../lib/storage';
import JournalHome from './JournalHome';
import SessionView from './SessionView';
import AnalysisView from './AnalysisView';
import ReportSection from '../../ReportSection';

interface JournalAppProps {
  state: NotebookState;
  onUpdate: (updates: Partial<NotebookState> | ((prev: NotebookState) => Partial<NotebookState>)) => void;
  onNavigateToChallenges: () => void;
  onNavigateToSection: (section: 'epoch1' | 'epoch2' | 'analyst1' | 'analyst2' | 'report') => void;
}

const JournalApp: React.FC<JournalAppProps> = ({ 
  state, 
  onUpdate,
  onNavigateToChallenges,
  onNavigateToSection
}) => {
  const currentView = state.ui.journalView || 'home';

  const handleSelectSession = (sessionId: string) => {
    // Load the session and determine where to navigate
    const session = state.sessions.find(s => s.id === sessionId);
    if (!session) return;

    // Determine which section to navigate to based on session progress
    const epoch1Done = session.epochs.epoch1.completed;
    const epoch2Done = session.epochs.epoch2.completed;
    const analyst1Done = session.analysts.epoch1.analyst1.status === 'complete' && session.analysts.epoch1.analyst2.status === 'complete';
    const analyst2Done = session.analysts.epoch2.analyst1.status === 'complete' && session.analysts.epoch2.analyst2.status === 'complete';

    let targetSection: 'epoch1' | 'epoch2' | 'analyst1' | 'analyst2' | 'report' = 'epoch1';
    if (!epoch1Done) targetSection = 'epoch1';
    else if (!epoch2Done) targetSection = 'epoch2';
    else if (!analyst1Done) targetSection = 'analyst1';
    else if (!analyst2Done) targetSection = 'analyst2';
    else targetSection = 'report';

    // Update state with selected session and navigate to appropriate section
    // Note: Legacy analyst fields maintained for backward compatibility
    onUpdate({
      activeSessionId: sessionId,
      challenge: session.challenge,
      process: session.process,
      epochs: session.epochs,
      analysts: {
        analyst1: session.analysts.epoch1.analyst1.data,
        analyst2: session.analysts.epoch2.analyst2.data
      },
      ui: {
        ...state.ui,
        currentSection: targetSection
      }
    });
  };

  const handleNewSession = () => {
    onNavigateToChallenges();
  };

  // Show JournalHome if no active session or explicitly on home view
  if (!state.activeSessionId || state.ui.currentSection === 'setup') {
    return (
      <JournalHome
        sessions={state.sessions}
        activeSessionId={state.activeSessionId}
        onSelectSession={handleSelectSession}
        onNewSession={handleNewSession}
        onUpdate={onUpdate}
      />
    );
  }

  // Route to appropriate subview based on currentSection
  switch (state.ui.currentSection) {
    case 'epoch1':
      return (
        <SessionView
          state={state}
          onUpdate={onUpdate}
          epochKey="epoch1"
          onNext={() => onNavigateToSection('epoch2')}
          onBack={handleNewSession}
        />
      );
    
    case 'epoch2':
      return (
        <SessionView
          state={state}
          onUpdate={onUpdate}
          epochKey="epoch2"
          onNext={() => onNavigateToSection('analyst1')}
          onBack={() => onNavigateToSection('epoch1')}
        />
      );
    
    case 'analyst1':
      return (
        <AnalysisView
          state={state}
          onUpdate={onUpdate}
          analystKey="analyst1"
          onNext={() => onNavigateToSection('analyst2')}
          onBack={() => onNavigateToSection('epoch2')}
        />
      );
    
    case 'analyst2':
      return (
        <AnalysisView
          state={state}
          onUpdate={onUpdate}
          analystKey="analyst2"
          onNext={() => onNavigateToSection('report')}
          onBack={() => onNavigateToSection('analyst1')}
        />
      );
    
    case 'report':
      return (
        <ReportSection
          state={state}
          onUpdate={onUpdate}
          onBack={() => onNavigateToSection('analyst2')}
          onNavigateToSection={onNavigateToSection}
        />
      );
    
    default:
      return (
        <JournalHome
          sessions={state.sessions}
          activeSessionId={state.activeSessionId}
          onSelectSession={handleSelectSession}
          onNewSession={handleNewSession}
          onUpdate={onUpdate}
        />
      );
  }
};

export default JournalApp;
</file>

<file path="src/components/apps/JournalApp/JournalHome.tsx">
import React from 'react';
import { Session } from '../../../types';
import { sessions as sessionsStorage } from '../../../lib/storage';
import { getSessionProgress, formatSessionDuration } from '../../../lib/session-utils';
import { useToast } from '../../shared/Toast';
import { useConfirm } from '../../shared/Modal';

interface JournalHomeProps {
  sessions: Session[];
  activeSessionId?: string;
  onSelectSession: (sessionId: string) => void;
  onNewSession: () => void;
  onUpdate: (updates: Partial<import('../../../types').NotebookState>) => void;
}

const JournalHome: React.FC<JournalHomeProps> = ({
  sessions,
  activeSessionId,
  onSelectSession,
  onNewSession,
  onUpdate
}) => {
  const [operationLoading, setOperationLoading] = React.useState<string | null>(null);
  const toast = useToast();
  const { confirm, ConfirmModal } = useConfirm();

  const handlePauseSession = async (sessionId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    setOperationLoading(sessionId);
    try {
      const newState = await sessionsStorage.update(sessionId, { status: 'paused' });
      onUpdate({ sessions: newState.sessions });
      toast.show('Session paused', 'success');
    } catch (error) {
      console.error('Error pausing session:', error);
      toast.show('Failed to pause session', 'error');
    } finally {
      setOperationLoading(null);
    }
  };

  const handleResumeSession = async (sessionId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    setOperationLoading(sessionId);
    try {
      const newState = await sessionsStorage.update(sessionId, { status: 'active' });
      onUpdate({ sessions: newState.sessions });
      toast.show('Session resumed', 'success');
    } catch (error) {
      console.error('Error resuming session:', error);
      toast.show('Failed to resume session', 'error');
    } finally {
      setOperationLoading(null);
    }
  };

  const handleDeleteSession = async (sessionId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    
    const confirmed = await confirm(
      'Delete Session?',
      'This will permanently delete this session and all its data. This action cannot be undone.',
      { destructive: true, confirmText: 'Delete' }
    );
    
    if (!confirmed) return;
    
    setOperationLoading(sessionId);
    try {
      const newState = await sessionsStorage.delete(sessionId);
      // Delete returns complete state with activeSessionId cleared if needed
      onUpdate(newState);
      toast.show('Session deleted', 'success');
    } catch (error) {
      console.error('Error deleting session:', error);
      toast.show('Failed to delete session', 'error');
    } finally {
      setOperationLoading(null);
    }
  };

  const handleCloneSession = async (sessionId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    setOperationLoading(sessionId);
    try {
      const clonedSession = await sessionsStorage.clone(sessionId);
      // Reload sessions from storage
      const freshState = await sessionsStorage.getAll();
      onUpdate({ sessions: freshState });
      toast.show('Session cloned - ready to start', 'success');
    } catch (error) {
      console.error('Error cloning session:', error);
      toast.show('Failed to clone session', 'error');
    } finally {
      setOperationLoading(null);
    }
  };
  const activeSessions = sessions.filter(s => s.status === 'active' || s.status === 'paused');
  const recentSessions = sessions
    .filter(s => s.status !== 'active' && s.status !== 'paused')
    .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
    .slice(0, 5);


  return (
    <div className="max-w-5xl mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2 flex items-center gap-2">
          <span>📓</span>
          <span>Journal</span>
        </h1>
        <p className="text-gray-600 dark:text-gray-400">
          Manage your active synthesis sessions and review recent work
        </p>
      </div>

      {/* Active Sessions */}
      {activeSessions.length > 0 && (
        <div className="mb-8">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
            🔄 Active Sessions
          </h2>
          <div className="space-y-4">
            {activeSessions.map(session => {
              const progress = getSessionProgress(session);
              const progressPercent = (progress.current / progress.total) * 100;
              const isActive = session.id === activeSessionId;

              return (
                <div
                  key={session.id}
                  className={`relative rounded-lg border-2 transition-all ${
                    isActive
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-400 hover:shadow-md'
                  }`}
                >
                  <button
                    onClick={() => onSelectSession(session.id)}
                    className="w-full p-5 text-left"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1 pr-20">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-1">
                          {session.challenge.title}
                        </h3>
                        <div className="flex flex-wrap gap-2">
                          <span className="px-2 py-1 bg-blue-100 dark:bg-blue-900/40 text-blue-800 dark:text-blue-200 text-xs rounded-full">
                            {session.challenge.type}
                          </span>
                          {session.status === 'paused' && (
                            <span className="px-2 py-1 bg-yellow-100 dark:bg-yellow-900/40 text-yellow-800 dark:text-yellow-200 text-xs rounded-full">
                              ⏸️ Paused
                            </span>
                          )}
                          {isActive && (
                            <span className="px-2 py-1 bg-green-100 dark:bg-green-900/40 text-green-800 dark:text-green-200 text-xs rounded-full">
                              ▶️ Current
                            </span>
                          )}
                        </div>
                      </div>
                      <div className="text-sm text-gray-500 dark:text-gray-400">
                        {formatSessionDuration(session)}
                      </div>
                    </div>

                  {/* Progress Bar */}
                  <div className="mb-2">
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-xs font-medium text-gray-700 dark:text-gray-300">
                        Progress: {progress.label}
                      </span>
                      <span className="text-xs text-gray-600 dark:text-gray-400">
                        {progress.current}/{progress.total} stages
                      </span>
                    </div>
                    <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                      <div
                        className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${progressPercent}%` }}
                      />
                    </div>
                  </div>

                    {/* Models Used */}
                    <div className="text-xs text-gray-600 dark:text-gray-400">
                      {session.process.model_epoch1 && (
                        <span>Epoch 1: {session.process.model_epoch1}</span>
                      )}
                      {session.process.model_epoch2 && (
                        <span className="ml-3">Epoch 2: {session.process.model_epoch2}</span>
                      )}
                    </div>
                  </button>

                  {/* Action Buttons */}
                  <div className="absolute top-3 right-3 flex gap-1">
                    {session.status === 'active' ? (
                      <button
                        onClick={(e) => handlePauseSession(session.id, e)}
                        disabled={operationLoading === session.id}
                        className="p-1.5 bg-yellow-100 dark:bg-yellow-900/40 text-yellow-700 dark:text-yellow-300 rounded hover:bg-yellow-200 dark:hover:bg-yellow-900/60 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        title="Pause session"
                      >
                        {operationLoading === session.id ? '⏳' : '⏸️'}
                      </button>
                    ) : session.status === 'paused' ? (
                      <button
                        onClick={(e) => handleResumeSession(session.id, e)}
                        disabled={operationLoading === session.id}
                        className="p-1.5 bg-green-100 dark:bg-green-900/40 text-green-700 dark:text-green-300 rounded hover:bg-green-200 dark:hover:bg-green-900/60 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        title="Resume session"
                      >
                        {operationLoading === session.id ? '⏳' : '▶️'}
                      </button>
                    ) : null}
                    <button
                      onClick={(e) => handleCloneSession(session.id, e)}
                      disabled={operationLoading === session.id}
                      className="p-1.5 bg-blue-100 dark:bg-blue-900/40 text-blue-700 dark:text-blue-300 rounded hover:bg-blue-200 dark:hover:bg-blue-900/60 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                      title="Clone session (reuse challenge)"
                    >
                      {operationLoading === session.id ? '⏳' : '📋'}
                    </button>
                    <button
                      onClick={(e) => handleDeleteSession(session.id, e)}
                      disabled={operationLoading === session.id}
                      className="p-1.5 bg-red-100 dark:bg-red-900/40 text-red-700 dark:text-red-300 rounded hover:bg-red-200 dark:hover:bg-red-900/60 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                      title="Delete session"
                    >
                      {operationLoading === session.id ? '⏳' : '🗑️'}
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Recent Sessions */}
      {recentSessions.length > 0 && (
        <div className="mb-8">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
            📜 Recent Sessions
          </h2>
          <div className="space-y-2">
            {recentSessions.map(session => (
              <button
                key={session.id}
                onClick={() => onSelectSession(session.id)}
                className="w-full p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 hover:shadow-sm transition-all text-left"
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900 dark:text-gray-100">
                      {session.challenge.title}
                    </h4>
                    <div className="flex items-center gap-2 mt-1">
                      <span className="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">
                        {session.challenge.type}
                      </span>
                      {session.status === 'complete' && (
                        <span className="text-xs text-green-600 dark:text-green-400">
                          ✓ Complete
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="text-xs text-gray-500 dark:text-gray-400">
                    {new Date(session.updatedAt).toLocaleDateString()}
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Empty State */}
      {activeSessions.length === 0 && recentSessions.length === 0 && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">📓</div>
          <h3 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
            No sessions yet
          </h3>
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            Start a new evaluation from the Challenges app
          </p>
          <button
            onClick={onNewSession}
            className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors"
          >
            Go to Challenges
          </button>
        </div>
      )}

      {/* New Session Button */}
      {(activeSessions.length > 0 || recentSessions.length > 0) && (
        <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
          <button
            onClick={onNewSession}
            className="w-full px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors flex items-center justify-center gap-2"
          >
            <span>➕</span>
            <span>New Session</span>
          </button>
        </div>
      )}

      {ConfirmModal}
    </div>
  );
};

export default JournalHome;
</file>

<file path="src/components/apps/JournalApp/SessionView.tsx">
import React from 'react';
import { NotebookState } from '../../../types';
import SynthesisSection from '../../SynthesisSection';

interface SessionViewProps {
  state: NotebookState;
  onUpdate: (updates: Partial<NotebookState> | ((prev: NotebookState) => Partial<NotebookState>)) => void;
  epochKey: 'epoch1' | 'epoch2';
  onNext: () => void;
  onBack: () => void;
}

/**
 * SessionView wraps SynthesisSection to provide consistent JournalApp routing.
 * Currently passes through to existing SynthesisSection which already syncs with sessions.
 * Future: Could load directly from session storage here for true session-first architecture.
 */
const SessionView: React.FC<SessionViewProps> = ({
  state,
  onUpdate,
  epochKey,
  onNext,
  onBack
}) => {
  // For now, delegate to SynthesisSection which already has session sync
  // In future iteration, could load session here and pass specific epoch data
  return (
    <SynthesisSection
      state={state}
      onUpdate={onUpdate}
      epochKey={epochKey}
      onNext={onNext}
      onBack={onBack}
    />
  );
};

export default SessionView;
</file>

<file path="src/components/apps/WelcomeApp.tsx">
import React from 'react';
import { NotebookState } from '../../types';
import AppCard from '../shared/AppCard';

interface WelcomeAppProps {
  state: NotebookState;
  onNavigate: (app: 'challenges' | 'journal' | 'insights' | 'settings') => void;
  onQuickStart: () => void;
  onResume: () => void;
}

const WelcomeApp: React.FC<WelcomeAppProps> = ({ 
  state, 
  onNavigate, 
  onQuickStart,
  onResume 
}) => {
  const activeSessions = state.sessions.filter(s => s.status === 'active' || s.status === 'paused');
  const completedInsightsCount = state.sessions.filter(s => s.status === 'complete').length;
  const hasActiveSession = activeSessions.length > 0;

  return (
    <div className="p-6 max-w-4xl mx-auto">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2">
          🌍 AI-Empowered Governance
        </h1>
        <p className="text-gray-600 dark:text-gray-400 text-lg">
          Transform AI conversations into validated governance insights using the GyroDiagnostics framework.
        </p>
      </div>

      {/* App Cards Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
        <AppCard
          icon="📋"
          title="Challenges"
          description="Select or create governance challenges to evaluate AI models"
          onClick={() => onNavigate('challenges')}
        />
        <AppCard
          icon="📓"
          title="Journal"
          description="Active synthesis sessions with structured evaluation"
          badge={hasActiveSession ? `${activeSessions.length} Active` : undefined}
          onClick={() => onNavigate('journal')}
        />
        <AppCard
          icon="💡"
          title="Insights"
          description="Browse, organize, and share completed evaluations"
          badge={completedInsightsCount > 0 ? `${completedInsightsCount}` : undefined}
          onClick={() => onNavigate('insights')}
        />
        <AppCard
          icon="⚙️"
          title="Settings"
          description="Preferences, templates, and configuration"
          onClick={() => onNavigate('settings')}
        />
      </div>

      {/* Quick Actions */}
      <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
        <h3 className="font-semibold text-gray-900 dark:text-gray-100 mb-3">Quick Start</h3>
        <div className="flex flex-col sm:flex-row gap-3">
          <button 
            className="flex-1 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200 flex items-center justify-center gap-2"
            onClick={onQuickStart}
          >
            <span>🚀</span>
            <span>New Evaluation</span>
          </button>
          {hasActiveSession && (
            <button 
              className="flex-1 px-6 py-3 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-gray-100 font-medium rounded-lg transition-colors duration-200 flex items-center justify-center gap-2"
              onClick={onResume}
            >
              <span>▶️</span>
              <span>Resume Session</span>
            </button>
          )}
        </div>
      </div>

      {/* Help Section */}
      <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
        <div className="flex items-start gap-3">
          <span className="text-2xl">💡</span>
          <div className="flex-1">
            <h4 className="font-semibold text-blue-900 dark:text-blue-100 mb-1">
              Getting Started
            </h4>
            <p className="text-sm text-blue-800 dark:text-blue-200 mb-2">
              The GyroDiagnostics framework helps you evaluate AI models through structured challenges across 5 domains: 
              Formal, Normative, Procedural, Strategic, and Epistemic.
            </p>
            <ul className="text-sm text-blue-800 dark:text-blue-200 space-y-1 ml-4">
              <li>• <strong>Participation:</strong> Select or create a challenge</li>
              <li>• <strong>Preparation:</strong> Run 2 synthesis epochs (6 turns each)</li>
              <li>• <strong>Provision:</strong> Evaluate with 2 analyst perspectives</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WelcomeApp;
</file>

<file path="src/components/ElementPicker.tsx">
import React, { useState, useEffect } from 'react';
import { useToast } from './shared/Toast';
import { chromeAPI } from '../lib/chrome-mock';

interface ElementPickerProps {
  onTextCaptured: (text: string) => void;
}

const ElementPicker: React.FC<ElementPickerProps> = ({ onTextCaptured }) => {
  const toast = useToast();
  const [isActive, setIsActive] = useState(false);

  useEffect(() => {
    // Only set up listeners if chrome.runtime exists (extension mode)
    if (!chromeAPI.runtime.onMessage) return;

    // Listen for element selection messages
    const handleMessage = (message: any) => {
      if (message.action === 'element_captured') {
        onTextCaptured(message.text);
        setIsActive(false);
      }
    };

    chromeAPI.runtime.onMessage.addListener(handleMessage);

    return () => {
      if (chromeAPI.runtime.onMessage) {
        chromeAPI.runtime.onMessage.removeListener(handleMessage);
      }
    };
  }, [onTextCaptured]);

  const activatePicker = async () => {
    try {
      // Get current active tab
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      
      if (!tab.id) {
        toast.show('Could not get active tab', 'error');
        return;
      }

      // Inject content script if not already injected
      await chrome.scripting.executeScript({
        target: { tabId: tab.id },
        func: () => {
          // Guard against double-injection
          // @ts-ignore
          if ((window as any).__gyroPickerActive) return;
          // @ts-ignore
          (window as any).__gyroPickerActive = true;

          let highlighted: HTMLElement | null = null;
          let tooltip: HTMLElement | null = null;

          function highlightElement(e: MouseEvent) {
            const target = e.target as HTMLElement;
            
            if (highlighted && highlighted !== target) {
              highlighted.style.outline = '';
            }
            
            target.style.outline = '2px solid #4A90E2';
            highlighted = target;
          }

          function selectElement(e: MouseEvent) {
            e.preventDefault();
            e.stopPropagation();
            
            const target = e.target as HTMLElement;
            const text = target.innerText || target.textContent || '';
            
            chrome.runtime.sendMessage({
              action: 'element_selected',
              text: text
            });
            
            cleanup();
          }

          function cleanup() {
            document.removeEventListener('mouseover', highlightElement as any);
            document.removeEventListener('click', selectElement as any);
            document.removeEventListener('keydown', handleEscape as any);
            
            if (highlighted) {
              highlighted.style.outline = '';
              highlighted = null;
            }
            
            if (tooltip) {
              tooltip.remove();
              tooltip = null;
            }

            // Reset guard flag
            // @ts-ignore
            (window as any).__gyroPickerActive = false;
          }

          function handleEscape(e: KeyboardEvent) {
            if (e.key === 'Escape') {
              cleanup();
            }
          }

          // Create tooltip
          tooltip = document.createElement('div');
          tooltip.innerHTML = '🎯 Click on AI response to capture (ESC to cancel)';
          tooltip.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: #4A90E2;
            color: white;
            padding: 12px 16px;
            border-radius: 6px;
            z-index: 2147483647;
            font-family: system-ui, -apple-system, sans-serif;
            font-size: 14px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            cursor: default;
          `;
          document.body.appendChild(tooltip);
          
          // Add event listeners
          document.addEventListener('mouseover', highlightElement as any);
          document.addEventListener('click', selectElement as any);
          document.addEventListener('keydown', handleEscape as any);
        }
      });

      setIsActive(true);
      
    } catch (error) {
      console.error('Error activating element picker:', error);
      toast.show('Could not activate element picker. Make sure you are on a web page.', 'error');
    }
  };

  return (
    <button
      onClick={activatePicker}
      className={`btn-secondary text-sm ${isActive ? 'opacity-50' : ''}`}
      disabled={isActive}
    >
      {isActive ? '🎯 Picker Active...' : '🎯 Pick from Page'}
    </button>
  );
};

export default ElementPicker;
</file>

<file path="src/components/ProgressDashboard.tsx">
import React from 'react';
import { NotebookState, Section } from '../types';
import { getActiveSession } from '../lib/session-helpers';

interface ProgressDashboardProps {
  state: NotebookState;
  onNavigate: (section: Section) => void;
}

const ProgressDashboard: React.FC<ProgressDashboardProps> = ({ state, onNavigate }) => {
  const session = getActiveSession(state);
  
  // Use session data if available, otherwise fall back to legacy state
  const sections = [
    { 
      key: 'setup' as Section, 
      label: 'Setup', 
      icon: '📋',
      completed: session ? !!session.challenge.title : state.challenge.title !== '',
      estimate: '2 min'
    },
    { 
      key: 'epoch1' as Section, 
      label: 'Epoch 1', 
      icon: '1️⃣',
      completed: session ? session.epochs.epoch1.completed : state.epochs.epoch1.completed,
      estimate: '10-15 min'
    },
    { 
      key: 'epoch2' as Section, 
      label: 'Epoch 2', 
      icon: '2️⃣',
      completed: session ? session.epochs.epoch2.completed : state.epochs.epoch2.completed,
      estimate: '10-15 min'
    },
    { 
      key: 'analyst1' as Section, 
      label: 'Epoch 1 Analysis', 
      icon: '🔬',
      completed: session ? (session.analysts.epoch1.analyst1.status === 'complete' && session.analysts.epoch1.analyst2.status === 'complete') : state.analysts.analyst1 !== null,
      estimate: '3-5 min'
    },
    { 
      key: 'analyst2' as Section, 
      label: 'Epoch 2 Analysis', 
      icon: '🔬',
      completed: session ? (session.analysts.epoch2.analyst1.status === 'complete' && session.analysts.epoch2.analyst2.status === 'complete') : state.analysts.analyst2 !== null,
      estimate: '3-5 min'
    },
    { 
      key: 'report' as Section, 
      label: 'Report', 
      icon: '📊',
      completed: state.results !== null,
      estimate: '1 min'
    }
  ];

  const currentIndex = sections.findIndex(s => s.key === state.ui.currentSection);
  const completedCount = sections.filter(s => s.completed).length;
  const progressPercent = (completedCount / sections.length) * 100;
  const currentSection = sections[currentIndex];

  return (
    <div className="space-y-2">
      {/* Progress bar with percentage */}
      <div className="flex items-center gap-3">
        <div className="flex-1 min-w-0">
          <div className="flex justify-between text-xs mb-1">
            <span className="font-medium text-gray-700 dark:text-gray-300">
              {currentSection ? `${currentSection.label} (${currentSection.estimate})` : 'Progress'}
            </span>
            <span className="text-gray-600 dark:text-gray-400">
              {completedCount}/{sections.length} complete
            </span>
          </div>
          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
            <div
              className="bg-gradient-to-r from-blue-600 to-green-500 h-2 rounded-full transition-all duration-500"
              style={{ width: `${progressPercent}%` }}
            />
          </div>
        </div>
      </div>

      {/* Section indicators with icons */}
      <div className="flex gap-1.5 overflow-x-auto pb-1">
        {sections.map((section, index) => (
          <button
            key={section.key}
            onClick={() => onNavigate(section.key)}
            disabled={!section.completed && index > currentIndex + 1}
            className={`flex flex-col items-center px-2 py-1.5 rounded transition-all min-w-[60px] ${
              index === currentIndex
                ? 'bg-blue-600 text-white shadow-lg ring-2 ring-blue-300 dark:ring-blue-700'
                : section.completed
                ? 'bg-green-100 dark:bg-green-900/40 text-green-800 dark:text-green-200 hover:bg-green-200 dark:hover:bg-green-800'
                : 'bg-gray-100 dark:bg-gray-700 text-gray-400 dark:text-gray-500 opacity-60'
            } disabled:cursor-not-allowed disabled:opacity-40`}
            title={`${section.label} - ${section.estimate}`}
          >
            <span className="text-base mb-0.5">{section.completed ? '✓' : section.icon}</span>
            <span className="text-xs font-medium">{section.label}</span>
          </button>
        ))}
      </div>
    </div>
  );
};

export default ProgressDashboard;
</file>

<file path="src/components/SetupSection.tsx">
import React, { useState } from 'react';
import { NotebookState, ChallengeType, Platform } from '../types';

interface SetupSectionProps {
  state: NotebookState;
  onUpdate: (updates: Partial<NotebookState> | ((prev: NotebookState) => Partial<NotebookState>)) => void;
  onNext: () => void;
}

const CHALLENGE_TYPES: { value: ChallengeType; label: string; description: string }[] = [
  { value: 'normative', label: 'Normative', description: 'Values, ethics, rights' },
  { value: 'strategic', label: 'Strategic', description: 'Planning, resource allocation' },
  { value: 'epistemic', label: 'Epistemic', description: 'Knowledge, truth, justification' },
  { value: 'procedural', label: 'Procedural', description: 'Process, fairness, participation' },
  { value: 'formal', label: 'Formal', description: 'Mathematical, logical reasoning' },
  { value: 'custom', label: 'Custom', description: 'Your own category' }
];

const PLATFORMS: { value: Platform; label: string }[] = [
  { value: 'lmarena', label: 'LMArena' },
  { value: 'chatgpt', label: 'ChatGPT' },
  { value: 'claude', label: 'Claude' },
  { value: 'poe', label: 'Poe' },
  { value: 'custom', label: 'Custom' }
];

const DOMAIN_OPTIONS = [
  'SDG 1: No Poverty',
  'SDG 2: Zero Hunger',
  'SDG 3: Good Health and Well-being',
  'SDG 4: Quality Education',
  'SDG 5: Gender Equality',
  'SDG 6: Clean Water and Sanitation',
  'SDG 7: Affordable and Clean Energy',
  'SDG 8: Decent Work and Economic Growth',
  'SDG 9: Industry, Innovation and Infrastructure',
  'SDG 10: Reduced Inequality',
  'SDG 11: Sustainable Cities and Communities',
  'SDG 12: Responsible Consumption and Production',
  'SDG 13: Climate Action',
  'SDG 14: Life Below Water',
  'SDG 15: Life on Land',
  'SDG 16: Peace, Justice and Strong Institutions',
  'SDG 17: Partnerships for the Goals'
];

const SetupSection: React.FC<SetupSectionProps> = ({ state, onUpdate, onNext }) => {
  const [title, setTitle] = useState(state.challenge.title);
  const [description, setDescription] = useState(state.challenge.description);
  const [challengeType, setChallengeType] = useState(state.challenge.type);
  const [domains, setDomains] = useState<string[]>(state.challenge.domain);
  const [platform, setPlatform] = useState(state.process.platform);

  const toggleDomain = (domain: string) => {
    if (domains.includes(domain)) {
      setDomains(domains.filter(d => d !== domain));
    } else {
      setDomains([...domains, domain]);
    }
  };

  const handleNext = async () => {
    if (!title || !description) {
      alert('Please fill in the challenge title and description');
      return;
    }

    onUpdate(prev => ({
      challenge: {
        ...prev.challenge,
        title,
        description,
        type: challengeType,
        domain: domains
      },
      process: {
        ...prev.process,
        platform,
        started_at: prev.process.started_at || new Date().toISOString()
      }
    }));

    onNext(); // safe now because updateState is functional
  };

  return (
    <div className="section-card">
      <h2 className="section-header">
        <span>1. Participation: Define Your Challenge</span>
      </h2>

      <div className="space-y-3">
        {/* Challenge Title */}
        <div>
          <label className="label-text">Challenge Title *</label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="e.g., Renewable Energy Transition Strategy"
            className="input-field"
          />
        </div>

        {/* Challenge Description */}
        <div>
          <label className="label-text">Challenge Description *</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Describe the governance challenge you want to explore..."
            rows={4}
            className="textarea-field"
          />
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
            This will be provided to AI models for synthesis
          </p>
        </div>

        {/* Challenge Type */}
        <div>
          <label className="label-text">Challenge Type</label>
          <div className="grid grid-cols-2 gap-2">
            {CHALLENGE_TYPES.map((type) => (
              <button
                key={type.value}
                onClick={() => setChallengeType(type.value)}
                className={`p-3 text-left border rounded transition-colors ${
                  challengeType === type.value
                    ? 'border-primary bg-blue-50 dark:bg-blue-900/30 dark:border-blue-400'
                    : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500 bg-white dark:bg-gray-800'
                }`}
              >
                <div className="font-medium text-sm text-gray-900 dark:text-gray-100">{type.label}</div>
                <div className="text-xs text-gray-600 dark:text-gray-400">{type.description}</div>
              </button>
            ))}
          </div>
        </div>

        {/* Domain Selection */}
        <div>
          <label className="label-text">Domain(s)</label>
          <div className="flex flex-wrap gap-2">
            {DOMAIN_OPTIONS.map((domain) => (
              <button
                key={domain}
                onClick={() => toggleDomain(domain)}
                className={`px-3 py-1 text-sm rounded-full transition-colors ${
                  domains.includes(domain)
                    ? 'bg-primary text-white'
                    : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                }`}
              >
                {domain}
              </button>
            ))}
          </div>
        </div>

        {/* Platform Selection */}
        <div>
          <label className="label-text">AI Platform</label>
          <select
            value={platform}
            onChange={(e) => setPlatform(e.target.value as Platform)}
            className="input-field"
          >
            {PLATFORMS.map((p) => (
              <option key={p.value} value={p.value}>
                {p.label}
              </option>
            ))}
          </select>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
            Select the platform where you'll conduct the synthesis
          </p>
        </div>

        {/* Next Button */}
        <div className="flex justify-end pt-2">
          <button onClick={handleNext} className="btn-primary">
            Continue to Synthesis →
          </button>
        </div>
      </div>
    </div>
  );
};

export default SetupSection;
</file>

<file path="src/components/shared/AppCard.tsx">
import React from 'react';

interface AppCardProps {
  icon: string;
  title: string;
  description: string;
  badge?: string;
  onClick: () => void;
  disabled?: boolean;
}

const AppCard: React.FC<AppCardProps> = ({ 
  icon, 
  title, 
  description, 
  badge, 
  onClick, 
  disabled = false 
}) => (
  <button
    onClick={onClick}
    disabled={disabled}
    className="relative p-6 bg-white dark:bg-gray-800 rounded-xl border-2 border-gray-200 dark:border-gray-700 
               hover:border-blue-500 hover:shadow-lg transition-all duration-200 disabled:opacity-50 
               disabled:cursor-not-allowed text-left w-full group"
  >
    <div className="text-4xl mb-3">{icon}</div>
    <h3 className="text-lg font-semibold mb-1 text-gray-900 dark:text-gray-100 group-hover:text-blue-600 dark:group-hover:text-blue-400">
      {title}
    </h3>
    <p className="text-sm text-gray-600 dark:text-gray-400">{description}</p>
    {badge && (
      <span className="absolute top-4 right-4 px-2 py-1 bg-blue-600 text-white text-xs font-medium rounded-full">
        {badge}
      </span>
    )}
  </button>
);

export default AppCard;
</file>

<file path="src/components/shared/Toast.tsx">
import React, { createContext, useContext, useState, ReactNode } from 'react';

interface Toast {
  id: number;
  message: string;
  type: 'success' | 'error' | 'info';
}

interface ToastContextValue {
  show: (message: string, type: Toast['type']) => void;
}

const ToastContext = createContext<ToastContextValue | null>(null);

export const ToastProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [toasts, setToasts] = useState<Toast[]>([]);

  const show = (message: string, type: Toast['type']) => {
    const id = Date.now() + Math.random(); // Ensure uniqueness
    setToasts(prev => [...prev, { id, message, type }]);
    
    setTimeout(() => {
      setToasts(prev => prev.filter(t => t.id !== id));
    }, 3000);
  };

  const getToastColor = (type: Toast['type']) => {
    switch (type) {
      case 'success':
        return 'bg-green-600 dark:bg-green-700';
      case 'error':
        return 'bg-red-600 dark:bg-red-700';
      case 'info':
        return 'bg-blue-600 dark:bg-blue-700';
    }
  };

  const getToastIcon = (type: Toast['type']) => {
    switch (type) {
      case 'success':
        return '✓';
      case 'error':
        return '✕';
      case 'info':
        return 'ℹ';
    }
  };

  return (
    <ToastContext.Provider value={{ show }}>
      {children}
      
      {/* Toast Container */}
      <div className="fixed bottom-4 right-4 space-y-2 z-50 pointer-events-none" role="status" aria-live="polite">
        {toasts.map(toast => (
          <div
            key={toast.id}
            className={`px-4 py-3 rounded-lg shadow-lg text-white flex items-center gap-2 animate-slide-in pointer-events-auto ${getToastColor(toast.type)}`}
          >
            <span className="text-lg font-bold">{getToastIcon(toast.type)}</span>
            <span className="text-sm">{toast.message}</span>
          </div>
        ))}
      </div>
    </ToastContext.Provider>
  );
};

export const useToast = () => {
  const context = useContext(ToastContext);
  if (!context) {
    throw new Error('useToast must be used within ToastProvider');
  }
  return context;
};
</file>

<file path="src/lib/calculations.ts">
// Calculation engine for quality metrics

import * as math from 'mathjs';
import { AnalystResponse, BehaviorScores, StructureScores, AlignmentCategory } from '../types';

/**
 * Calculate average of structure scores (1-10 scale)
 * All values must be finite and in range.
 */
export function calculateStructureAverage(scores: StructureScores): number {
  const values = Object.values(scores);
  if (!values.every(v => Number.isFinite(v) && v >= 1 && v <= 10)) {
    throw new Error('Invalid structure scores (must be 1..10).');
  }
  return values.reduce((sum, val) => sum + val, 0) / values.length;
}

/**
 * Calculate average of behavior scores (1-10 scale, handling N/A)
 * Include only numeric metrics; if none, throw (Behavior must be present).
 */
export function calculateBehaviorAverage(scores: BehaviorScores): number {
  const values: number[] = [];
  const pushIfNumber = (v: number | 'N/A') => {
    if (typeof v === 'number') {
      if (!(v >= 1 && v <= 10)) throw new Error('Behavior score out of 1..10.');
      values.push(v);
    }
  };
  pushIfNumber(scores.truthfulness);
  pushIfNumber(scores.completeness);
  pushIfNumber(scores.groundedness);
  pushIfNumber(scores.literacy);
  pushIfNumber(scores.comparison);
  pushIfNumber(scores.preference);

  if (values.length === 0) throw new Error('No behavior metrics present.');
  return values.reduce((sum, val) => sum + val, 0) / values.length;
}

/**
 * Calculate average of specialization scores
 * No defaults. Empty => contributes 0.
 */
export function calculateSpecializationAverage(scores: Record<string, number>): number {
  const values = Object.values(scores);
  if (values.length === 0) return 0.0;
  if (!values.every(v => Number.isFinite(v) && v >= 1 && v <= 10)) {
    throw new Error('Invalid specialization scores (must be 1..10).');
  }
  return values.reduce((sum, val) => sum + val, 0) / values.length;
}

/**
 * Aggregate scores from two analysts using median (average of two values)
 * Per-metric median with no default injection.
 */
export function aggregateAnalysts(
  analyst1: AnalystResponse,
  analyst2: AnalystResponse
): {
  structure: StructureScores;
  behavior: BehaviorScores;
  specialization: Record<string, number>;
  pathologies: string[];
} {
  const med2 = (a: number, b: number) => (a + b) / 2;
  
  // Structure: both must be numeric
  const structure: StructureScores = {
    traceability: med2(analyst1.structure_scores.traceability, analyst2.structure_scores.traceability),
    variety: med2(analyst1.structure_scores.variety, analyst2.structure_scores.variety),
    accountability: med2(analyst1.structure_scores.accountability, analyst2.structure_scores.accountability),
    integrity: med2(analyst1.structure_scores.integrity, analyst2.structure_scores.integrity)
  };

  // Behavior: if one analyst has N/A for a metric and the other numeric, use the numeric.
  const medOrSingle = (a: number | "N/A", b: number | "N/A"): number | "N/A" => {
    if (typeof a === 'number' && typeof b === 'number') return med2(a, b);
    if (typeof a === 'number') return a;
    if (typeof b === 'number') return b;
    return "N/A";
  };

  const behavior: BehaviorScores = {
    truthfulness: med2(analyst1.behavior_scores.truthfulness, analyst2.behavior_scores.truthfulness),
    completeness: med2(analyst1.behavior_scores.completeness, analyst2.behavior_scores.completeness),
    groundedness: med2(analyst1.behavior_scores.groundedness, analyst2.behavior_scores.groundedness),
    literacy: med2(analyst1.behavior_scores.literacy, analyst2.behavior_scores.literacy),
    comparison: medOrSingle(analyst1.behavior_scores.comparison, analyst2.behavior_scores.comparison),
    preference: medOrSingle(analyst1.behavior_scores.preference, analyst2.behavior_scores.preference)
  };

  // Specialization: median where both present; if only one present, use that; else omit.
  const specialization: Record<string, number> = {};
  const allKeys = new Set([
    ...Object.keys(analyst1.specialization_scores),
    ...Object.keys(analyst2.specialization_scores)
  ]);
  
  for (const key of allKeys) {
    const val1 = analyst1.specialization_scores[key];
    const val2 = analyst2.specialization_scores[key];
    const isNum1 = Number.isFinite(val1);
    const isNum2 = Number.isFinite(val2);
    
    if (isNum1 && isNum2) {
      specialization[key] = med2(val1, val2);
    } else if (isNum1) {
      specialization[key] = val1;
    } else if (isNum2) {
      specialization[key] = val2;
    }
  }

  // Combine pathologies (unique)
  const pathologies = Array.from(new Set([
    ...(analyst1.pathologies || []),
    ...(analyst2.pathologies || [])
  ].filter(Boolean)));

  return { structure, behavior, specialization, pathologies };
}

/**
 * Calculate Quality Index (weighted average, scaled to 100)
 * Structure: 40%, Behavior: 40%, Specialization: 20%
 */
export function calculateQualityIndex(
  structureAvg: number,
  behaviorAvg: number,
  specializationAvg: number
): number {
  // Scores are 1-10, convert to 0-100 scale
  const structurePct = (structureAvg / 10) * 100;
  const behaviorPct = (behaviorAvg / 10) * 100;
  const specializationPct = (specializationAvg / 10) * 100;
  
  return (structurePct * 0.4) + (behaviorPct * 0.4) + (specializationPct * 0.2);
}

/**
 * Calculate Alignment Rate (Quality per minute)
 * QI must be 0..1 internally; accepts both 0..1 and 0..100.
 * Returns rate and category (VALID, SUPERFICIAL, or SLOW)
 */
export function calculateAlignmentRate(
  qualityIndex: number,
  durationMinutes: number
): {
  rate: number;
  category: AlignmentCategory;
} {
  if (!Number.isFinite(durationMinutes) || durationMinutes <= 0) {
    return { rate: 0, category: 'SLOW' };
  }

  // Normalize QI to 0..1 if it's on 0..100 scale
  const qiNorm = qualityIndex > 1 ? qualityIndex / 100 : qualityIndex;
  const rate = qiNorm / durationMinutes;
  
  let category: AlignmentCategory;
  if (rate < 0.03) {
    category = 'SLOW';
  } else if (rate > 0.15) {
    category = 'SUPERFICIAL';
  } else {
    category = 'VALID';
  }
  
  return { rate, category };
}

/**
 * Calculate Superintelligence Index using K4 graph topology
 * Based on behavior scores and CGM Balance theory
 * Requires all 6 metrics numeric in [1,10]; no defaults, no fallbacks.
 */
export function calculateSuperintelligenceIndex(
  behaviorScores: number[]
): {
  si: number;
  aperture: number;
  deviation: number;
} {
  if (behaviorScores.length !== 6) {
    throw new Error('Exactly 6 behavior scores required for SI.');
  }
  for (const s of behaviorScores) {
    if (!Number.isFinite(s) || s < 1 || s > 10) {
      throw new Error(`Invalid behavior score: ${s}. Must be 1..10.`);
    }
  }

  const A_STAR = 0.020701;

  // Incidence: rows = vertices (4), cols = edges (6)
  const B = math.matrix([
    [ 1,  1,  1,  0,  0,  0],  // v0
    [-1,  0,  0,  1,  1,  0],  // v1
    [ 0, -1,  0, -1,  0,  1],  // v2
    [ 0,  0, -1,  0, -1, -1]   // v3
  ]);

  const s = math.reshape(math.matrix(behaviorScores), [6, 1]);

  // Gauge-fixed normal equations: φ = argmin ||s - B^T φ||^2
  const L = math.multiply(B, math.transpose(B)) as math.Matrix; // 4x4
  const rhs = math.multiply(B, s) as math.Matrix;               // 4x1

  const Larr = L.toArray() as number[][];
  const rhsArr = math.squeeze(rhs).toArray() as number[];

  // Remove row/col 0 (φ0 = 0)
  const Lred = [
    [Larr[1][1], Larr[1][2], Larr[1][3]],
    [Larr[2][1], Larr[2][2], Larr[2][3]],
    [Larr[3][1], Larr[3][2], Larr[3][3]],
  ];
  const rhsRed = [rhsArr[1], rhsArr[2], rhsArr[3]];

  let phiRed: number[][];
  try {
    phiRed = math.lusolve(Lred, rhsRed) as number[][];
  } catch {
    // No fallback solution path: raise to surface errors
    throw new Error('K4 decomposition solve failed (singular).');
  }
  const phi = [0, phiRed[0][0], phiRed[1][0], phiRed[2][0]];

  // Gradient on edges = B^T φ (6x1)
  const grad = math.multiply(math.transpose(B), math.matrix(phi)) as math.Matrix;
  const gradArr = math.squeeze(grad).toArray() as number[];
  const residual = behaviorScores.map((v, i) => v - gradArr[i]);

  const total = behaviorScores.reduce((acc, v) => acc + v * v, 0);
  if (total <= 0) throw new Error('Zero total energy in behavior vector.');
  const r2 = residual.reduce((acc, v) => acc + v * v, 0);

  const aperture = r2 / total;
  const deviation = Math.max(aperture / A_STAR, A_STAR / aperture);
  const si = 100 / deviation;

  return { si, aperture, deviation };
}
</file>

<file path="src/lib/challenges.ts">
// Challenge definitions for GyroDiagnostics Suite and SDG Challenges

import { ChallengeType } from '../types';

export interface ChallengeTemplate {
  id: string;
  title: string;
  description: string;
  type: ChallengeType;
  domain: string[];
  prompt: string;
  icon?: string;
  color?: string;
}

// GyroDiagnostics 5-Challenge Evaluation Suite
export const GYRO_SUITE = {
  title: "GyroDiagnostics Evaluation Suite",
  description: "Complete 5-domain model assessment across all governance dimensions",
  challenges: [
    {
      type: 'formal' as ChallengeType,
      icon: '🧮',
      label: 'Formal',
      domains: 'Physics & Mathematics',
      color: 'blue',
      description: 'Quantitative reasoning, logical precision, and mathematical frameworks'
    },
    {
      type: 'normative' as ChallengeType,
      icon: '⚖️',
      label: 'Normative',
      domains: 'Policy & Ethics',
      color: 'green',
      description: 'Values, ethics, and stakeholder-centered governance'
    },
    {
      type: 'procedural' as ChallengeType,
      icon: '💻',
      label: 'Procedural',
      domains: 'Code & Debugging',
      color: 'purple',
      description: 'Technical implementation and systematic problem-solving'
    },
    {
      type: 'strategic' as ChallengeType,
      icon: '🎲',
      label: 'Strategic',
      domains: 'Finance & Strategy',
      color: 'orange',
      description: 'Long-term planning, resource allocation, and adaptive governance'
    },
    {
      type: 'epistemic' as ChallengeType,
      icon: '🔍',
      label: 'Epistemic',
      domains: 'Knowledge & Communication',
      color: 'pink',
      description: 'Knowledge synthesis, evidence evaluation, and clear communication'
    }
  ],
  estimatedTime: "2-4 hours",
  output: "Comprehensive model quality report with SI, QI, AR metrics across all governance dimensions"
};

// UN Sustainable Development Goals as Challenge Templates
export const SDG_CHALLENGES: ChallengeTemplate[] = [
  {
    id: 'sdg_1',
    title: "No Poverty",
    description: "End poverty in all its forms everywhere",
    type: 'normative',
    domain: ['SDG-1', 'economic', 'social'],
    icon: '🚫',
    color: '#E5243B',
    prompt: `Design an AI-Empowered governance framework to eliminate poverty globally.

Your framework should address:
1. Root causes of poverty across different contexts (urban, rural, developing, developed nations)
2. Multi-stakeholder coordination (governments, NGOs, private sector, communities)
3. Evidence-based intervention strategies with measurable outcomes
4. Resource allocation mechanisms that ensure equity and efficiency
5. Monitoring systems to track progress and adapt strategies
6. How AI could enhance decision-making without replacing human agency

Provide a structured, comprehensive response that balances theoretical rigor with practical implementation.`
  },
  {
    id: 'sdg_2',
    title: "Zero Hunger",
    description: "End hunger, achieve food security and improved nutrition",
    type: 'strategic',
    domain: ['SDG-2', 'agriculture', 'nutrition'],
    icon: '🌾',
    color: '#DDA63A',
    prompt: `Develop an AI-Empowered strategy for achieving global food security and ending hunger.

Your strategy should cover:
1. Agricultural innovation and sustainable farming practices
2. Supply chain optimization from farm to consumer
3. Nutrition security beyond caloric sufficiency
4. Climate adaptation and resilience in food systems
5. Economic models that support smallholder farmers
6. Technology deployment that is accessible across income levels

Present a holistic framework that integrates environmental, economic, and social dimensions.`
  },
  {
    id: 'sdg_3',
    title: "Good Health and Well-Being",
    description: "Ensure healthy lives and promote well-being for all",
    type: 'normative',
    domain: ['SDG-3', 'health', 'well-being'],
    icon: '🏥',
    color: '#4C9F38',
    prompt: `Create an AI-Empowered framework for global health systems that ensure universal access to quality healthcare.

Address the following:
1. Disease prevention and health promotion strategies
2. Healthcare infrastructure in underserved regions
3. Mental health integration into primary care
4. Pandemic preparedness and response mechanisms
5. Ethical considerations in AI-assisted diagnostics and treatment
6. Balancing innovation with equity in healthcare access

Develop a comprehensive governance model that prioritizes human dignity and health equity.`
  },
  {
    id: 'sdg_4',
    title: "Quality Education",
    description: "Ensure inclusive and equitable quality education",
    type: 'epistemic',
    domain: ['SDG-4', 'education', 'learning'],
    icon: '📚',
    color: '#C5192D',
    prompt: `Design an AI-Empowered framework for global education that ensures quality, equity, and lifelong learning.

Your framework should include:
1. Pedagogical approaches that adapt to diverse learning needs
2. Infrastructure and resource requirements for underserved areas
3. Teacher training and professional development at scale
4. Curriculum design that balances traditional knowledge and future skills
5. Assessment systems that recognize diverse forms of intelligence
6. Ethical use of AI in personalized learning without reinforcing biases

Provide a vision that respects cultural diversity while ensuring educational excellence.`
  },
  {
    id: 'sdg_5',
    title: "Gender Equality",
    description: "Achieve gender equality and empower all women and girls",
    type: 'normative',
    domain: ['SDG-5', 'gender', 'equality'],
    icon: '⚖️',
    color: '#FF3A21',
    prompt: `Develop an AI-Empowered governance framework to achieve gender equality globally.

Your framework should address:
1. Legal and policy reforms to eliminate discrimination
2. Economic empowerment and equal access to resources
3. Violence prevention and protection mechanisms
4. Political representation and leadership opportunities
5. Cultural and social norm transformation strategies
6. How AI systems can avoid perpetuating gender biases

Create a comprehensive approach that recognizes intersectionality and diverse gender experiences.`
  },
  {
    id: 'sdg_6',
    title: "Clean Water and Sanitation",
    description: "Ensure availability and sustainable management of water",
    type: 'strategic',
    domain: ['SDG-6', 'water', 'sanitation'],
    icon: '💧',
    color: '#26BDE2',
    prompt: `Design an AI-Empowered strategy for universal access to clean water and sanitation.

Include in your strategy:
1. Water resource management in the context of climate change
2. Infrastructure development for underserved communities
3. Sanitation systems that are culturally appropriate and sustainable
4. Water quality monitoring and pollution prevention
5. Governance structures for transboundary water resources
6. Technology solutions that are low-cost and maintainable

Present an integrated approach that balances environmental sustainability with human needs.`
  },
  {
    id: 'sdg_7',
    title: "Affordable and Clean Energy",
    description: "Ensure access to affordable, reliable, sustainable energy",
    type: 'strategic',
    domain: ['SDG-7', 'energy', 'sustainability'],
    icon: '⚡',
    color: '#FCC30B',
    prompt: `Create an AI-Empowered framework for global energy transition to affordable, clean, and sustainable sources.

Your framework should cover:
1. Renewable energy deployment strategies at scale
2. Energy storage and grid modernization
3. Access to electricity for 800+ million people without it
4. Just transition for communities dependent on fossil fuel industries
5. Energy efficiency in buildings, transport, and industry
6. International cooperation on technology transfer

Develop a comprehensive plan that balances environmental, economic, and social objectives.`
  },
  {
    id: 'sdg_8',
    title: "Decent Work and Economic Growth",
    description: "Promote sustained, inclusive and sustainable economic growth",
    type: 'strategic',
    domain: ['SDG-8', 'economy', 'employment'],
    icon: '💼',
    color: '#A21942',
    prompt: `Design an AI-Empowered framework for economic systems that generate decent work and sustainable growth.

Address the following:
1. Job creation in the context of automation and AI
2. Labor rights and working conditions globally
3. Informal economy integration and protection
4. Youth employment and skills development
5. Sustainable business models and corporate responsibility
6. Balancing economic growth with environmental limits

Provide a governance model for economies that serve human flourishing.`
  },
  {
    id: 'sdg_9',
    title: "Industry, Innovation and Infrastructure",
    description: "Build resilient infrastructure, promote inclusive industrialization",
    type: 'procedural',
    domain: ['SDG-9', 'infrastructure', 'innovation'],
    icon: '🏗️',
    color: '#FD6925',
    prompt: `Develop an AI-Empowered strategy for resilient infrastructure and sustainable industrialization.

Your strategy should include:
1. Infrastructure development priorities for developing nations
2. Innovation systems that are inclusive and accessible
3. Sustainable manufacturing and circular economy principles
4. Digital infrastructure and connectivity for all
5. Technology transfer and capacity building mechanisms
6. Public-private partnerships that serve public interest

Create a framework that bridges the infrastructure gap while ensuring sustainability.`
  },
  {
    id: 'sdg_10',
    title: "Reduced Inequalities",
    description: "Reduce inequality within and among countries",
    type: 'normative',
    domain: ['SDG-10', 'equality', 'inclusion'],
    icon: '📊',
    color: '#DD1367',
    prompt: `Create an AI-Empowered governance framework to reduce inequalities globally.

Your framework should address:
1. Income and wealth inequality reduction strategies
2. Social inclusion of marginalized groups (disability, age, ethnicity, etc.)
3. Migration and refugee rights and integration
4. Global financial architecture reform
5. Technology access and digital divide
6. Representation in decision-making at all levels

Develop a comprehensive approach to inequality that recognizes its multiple dimensions.`
  },
  {
    id: 'sdg_11',
    title: "Sustainable Cities and Communities",
    description: "Make cities and human settlements inclusive, safe, resilient",
    type: 'strategic',
    domain: ['SDG-11', 'urban', 'sustainability'],
    icon: '🏙️',
    color: '#FD9D24',
    prompt: `Design an AI-Empowered framework for sustainable urban development.

Your framework should cover:
1. Affordable housing and slum upgrading
2. Sustainable transport systems and urban mobility
3. Green spaces and urban environmental quality
4. Climate resilience and disaster risk reduction
5. Cultural heritage preservation alongside modernization
6. Participatory urban governance and planning

Present an integrated urban governance model for cities that serve all residents.`
  },
  {
    id: 'sdg_12',
    title: "Responsible Consumption and Production",
    description: "Ensure sustainable consumption and production patterns",
    type: 'strategic',
    domain: ['SDG-12', 'sustainability', 'economy'],
    icon: '♻️',
    color: '#BF8B2E',
    prompt: `Develop an AI-Empowered strategy for transforming production and consumption systems.

Your strategy should include:
1. Circular economy implementation at scale
2. Waste reduction and management systems
3. Sustainable supply chains and corporate accountability
4. Consumer behavior change strategies
5. Food loss and waste reduction
6. Chemical and hazardous waste management

Create a comprehensive framework for economic systems within planetary boundaries.`
  },
  {
    id: 'sdg_13',
    title: "Climate Action",
    description: "Take urgent action to combat climate change",
    type: 'strategic',
    domain: ['SDG-13', 'climate', 'environment'],
    icon: '🌍',
    color: '#3F7E44',
    prompt: `Create an AI-Empowered framework for urgent climate action.

Address the following:
1. Emission reduction pathways to limit warming to 1.5°C
2. Climate adaptation strategies for vulnerable communities
3. Climate finance and technology transfer mechanisms
4. Nature-based solutions and ecosystem restoration
5. Just transition and social equity in climate action
6. International cooperation and climate governance

Develop a comprehensive climate governance framework that balances mitigation, adaptation, and justice.`
  },
  {
    id: 'sdg_14',
    title: "Life Below Water",
    description: "Conserve and sustainably use the oceans, seas and marine resources",
    type: 'strategic',
    domain: ['SDG-14', 'oceans', 'marine'],
    icon: '🌊',
    color: '#0A97D9',
    prompt: `Design an AI-Empowered framework for ocean conservation and sustainable use.

Your framework should include:
1. Marine biodiversity protection and ecosystem restoration
2. Sustainable fisheries management
3. Marine pollution reduction (plastic, chemical, noise)
4. Ocean acidification and temperature rise mitigation
5. Coastal community livelihoods and rights
6. Governance of international waters and high seas

Present an integrated approach to ocean health that serves both ecosystems and human communities.`
  },
  {
    id: 'sdg_15',
    title: "Life on Land",
    description: "Protect, restore and promote sustainable use of terrestrial ecosystems",
    type: 'strategic',
    domain: ['SDG-15', 'biodiversity', 'ecosystems'],
    icon: '🌳',
    color: '#56C02B',
    prompt: `Develop an AI-Empowered strategy for terrestrial ecosystem conservation and restoration.

Your strategy should cover:
1. Deforestation halt and forest restoration
2. Biodiversity loss prevention and species protection
3. Land degradation and desertification reversal
4. Sustainable land management and agriculture
5. Indigenous and local community rights and knowledge
6. Wildlife trafficking prevention

Create a comprehensive framework for planetary stewardship that recognizes the intrinsic value of nature.`
  },
  {
    id: 'sdg_16',
    title: "Peace, Justice and Strong Institutions",
    description: "Promote peaceful and inclusive societies, provide access to justice",
    type: 'normative',
    domain: ['SDG-16', 'governance', 'justice'],
    icon: '⚖️',
    color: '#00689D',
    prompt: `Create an AI-Empowered governance framework for peace, justice, and effective institutions.

Your framework should address:
1. Violence reduction and conflict prevention mechanisms
2. Rule of law and access to justice for all
3. Anti-corruption measures and transparent institutions
4. Inclusive decision-making and representation
5. Human rights protection and accountability
6. Global governance reform for 21st century challenges

Develop a comprehensive vision for governance that serves peace and justice.`
  },
  {
    id: 'sdg_17',
    title: "Partnerships for the Goals",
    description: "Strengthen the means of implementation and revitalize partnerships",
    type: 'strategic',
    domain: ['SDG-17', 'partnership', 'implementation'],
    icon: '🤝',
    color: '#19486A',
    prompt: `Design an AI-Empowered framework for global partnerships to achieve the SDGs.

Your framework should include:
1. Finance mobilization for sustainable development
2. Technology development and transfer mechanisms
3. Capacity building in developing countries
4. Trade systems that support sustainable development
5. Multi-stakeholder partnerships (public, private, civil society)
6. Data and monitoring systems for accountability

Present a comprehensive approach to global cooperation for sustainable development.`
  }
];

// Get challenge template by ID
export function getChallengeById(id: string): ChallengeTemplate | undefined {
  return SDG_CHALLENGES.find(c => c.id === id);
}

// Get challenges by type
export function getChallengesByType(type: ChallengeType): ChallengeTemplate[] {
  return SDG_CHALLENGES.filter(c => c.type === type);
}
</file>

<file path="src/lib/export.ts">
// Export utilities for generating JSON, Markdown, and ZIP files

import { GovernanceInsight } from '../types';

/**
 * Generate JSON export
 */
export function exportAsJSON(insight: GovernanceInsight): string {
  return JSON.stringify(insight, null, 2);
}

/**
 * Generate Markdown export
 */
export function exportAsMarkdown(insight: GovernanceInsight): string {
  const md = `# ${insight.challenge.title}

**Generated**: ${new Date(insight.process.created_at).toLocaleString()}  
**Quality Index**: ${insight.quality.quality_index.toFixed(1)}% (${insight.quality.alignment_rate_category})  
**Superintelligence Index**: ${insight.quality.superintelligence_index.toFixed(2)} (${insight.quality.si_deviation.toFixed(2)}× deviation)

## Challenge

**Type**: ${insight.challenge.type}  
**Domain**: ${insight.challenge.domain.join(', ')}

${insight.challenge.description}

## Insights

${insight.insights.combined_markdown}

### Summary

${insight.insights.summary}

### Participation

${insight.insights.participation}

### Preparation

${insight.insights.preparation}

### Provision

${insight.insights.provision}

## Quality Validation

### Structure Scores
- **Traceability**: ${insight.quality.structure_scores.traceability.toFixed(1)}/10
- **Variety**: ${insight.quality.structure_scores.variety.toFixed(1)}/10
- **Accountability**: ${insight.quality.structure_scores.accountability.toFixed(1)}/10
- **Integrity**: ${insight.quality.structure_scores.integrity.toFixed(1)}/10

**Average**: ${((insight.quality.structure_scores.traceability + insight.quality.structure_scores.variety + insight.quality.structure_scores.accountability + insight.quality.structure_scores.integrity) / 4).toFixed(1)}/10

### Behavior Scores
- **Truthfulness**: ${insight.quality.behavior_scores.truthfulness.toFixed(1)}/10
- **Completeness**: ${insight.quality.behavior_scores.completeness.toFixed(1)}/10
- **Groundedness**: ${insight.quality.behavior_scores.groundedness.toFixed(1)}/10
- **Literacy**: ${insight.quality.behavior_scores.literacy.toFixed(1)}/10
- **Comparison**: ${typeof insight.quality.behavior_scores.comparison === 'number' ? insight.quality.behavior_scores.comparison.toFixed(1) : 'N/A'}/10
- **Preference**: ${typeof insight.quality.behavior_scores.preference === 'number' ? insight.quality.behavior_scores.preference.toFixed(1) : 'N/A'}/10

### Specialization Scores
${Object.entries(insight.quality.specialization_scores).map(([key, value]) => `- **${key}**: ${value.toFixed(1)}/10`).join('\n')}

### Pathologies Detected

${insight.quality.pathologies.detected.length > 0 
  ? insight.quality.pathologies.detected.map(p => `- ${p}`).join('\n')
  : '_None detected_'}

**Frequency**: ${insight.quality.pathologies.frequency.toFixed(2)} (across epochs)

### Alignment Rate

**Rate**: ${insight.quality.alignment_rate.toFixed(4)}/min  
**Category**: ${insight.quality.alignment_rate_category}

## Process Metadata

- **Platform**: ${insight.process.platform}
- **Models Used**:
  - Synthesis Epoch 1: ${insight.process.models_used.synthesis_epoch1}
  - Synthesis Epoch 2: ${insight.process.models_used.synthesis_epoch2}
  - Analyst 1: ${insight.process.models_used.analyst1}
  - Analyst 2: ${insight.process.models_used.analyst2}
- **Duration**:
  - Epoch 1: ${insight.process.durations.epoch1_minutes} minutes
  - Epoch 2: ${insight.process.durations.epoch2_minutes} minutes
- **Schema Version**: ${insight.process.schema_version}

## Contribution

- **License**: ${insight.contribution.license}
- **Contributor**: ${insight.contribution.contributor}
- **Public**: ${insight.contribution.public ? 'Yes' : 'No'}

---

_Generated with AI-Empowered Governance Apps_
`;
  
  return md;
}

/**
 * Download a file to the user's computer
 */
export function downloadFile(filename: string, content: string, mimeType: string = 'text/plain'): void {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

/**
 * Generate filename based on challenge title and timestamp
 */
export function generateFilename(title: string, extension: string): string {
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const cleanTitle = title
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '_')
    .slice(0, 50);
  return `${cleanTitle}_${timestamp}.${extension}`;
}

/**
 * Generate GitHub contribution URL
 */
export function generateGitHubContributionURL(insight: GovernanceInsight): string {
  const domain = insight.challenge.domain[0]?.toLowerCase().replace(/\s+/g, '-') || 'custom';
  const timestamp = Date.now();
  const filename = `insight_${timestamp}.json`;
  const jsonContent = encodeURIComponent(exportAsJSON(insight));
  
  const baseURL = 'https://github.com/gyrogovernance/apps/new/main/insights';
  return `${baseURL}/${domain}?filename=${filename}&value=${jsonContent}`;
}

/**
 * Generate GitHub issue URL for contribution
 */
export function generateGitHubIssueURL(insight: GovernanceInsight): string {
  const title = encodeURIComponent(`[Contribution] ${insight.challenge.title}`);
  const body = encodeURIComponent(`# New Governance Insight

**Title**: ${insight.challenge.title}
**Type**: ${insight.challenge.type}
**Domain**: ${insight.challenge.domain.join(', ')}
**Quality Index**: ${insight.quality.quality_index.toFixed(1)}%

## JSON Data

\`\`\`json
${exportAsJSON(insight)}
\`\`\`

## Markdown Report

${exportAsMarkdown(insight)}
`);
  
  return `https://github.com/gyrogovernance/apps/issues/new?title=${title}&body=${body}`;
}
</file>


<!-- ⏳ PLEASE WAIT FOR NEXT DROP IN NEXT MESSAGE - DON'T REVIEW YET -->

</files>
